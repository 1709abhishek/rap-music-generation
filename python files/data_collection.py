# -*- coding: utf-8 -*-
"""data_collection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PPKDidOkkCXwSNDcpsDd9IgRqv0Z2B_h
"""

from google.colab import drive
drive.mount('/content/MyDrive')

import csv
import requests

# Define your Musixmatch API key
MUSIXMATCH_API_KEY = "7de93c211254f03eae1c3f9f808ea21e"
all_songs = []
# Function to search for tracks by artist
def search_tracks(artist_name, page_size=50):
    url = f"https://api.musixmatch.com/ws/1.1/track.search"
    params = {
        "apikey": MUSIXMATCH_API_KEY,
        "q_artist": artist_name,
        "page_size": page_size,
        "s_track_rating": "desc"
    }
    response = requests.get(url, params=params)
    data = response.json()
    if "message" in data and "body" in data["message"]:
        tracks = data["message"]["body"]["track_list"]
        return [(track["track"]["track_name"], track["track"]["artist_name"], track["track"]["track_id"]) for track in tracks]
    else:
        print("Failed to fetch tracks.")
        return []

# Function to get lyrics for a track by track_id
def get_lyrics(track_id):
    url = f"https://api.musixmatch.com/ws/1.1/track.lyrics.get"
    params = {
        "apikey": MUSIXMATCH_API_KEY,
        "track_id": track_id
    }
    response = requests.get(url, params=params)
    data = response.json()
    if "message" in data and "body" in data["message"]:
        lyrics = data["message"]["body"]["lyrics"]["lyrics_body"]
        # Remove metadata from the lyrics
        lyrics = lyrics.split("*******")[0]
        return lyrics.strip()
    else:
        print("Failed to fetch lyrics.")
        return ""

# Function to get lyrics for 10 songs of an artist
def get_artist_lyrics(artist_name):
    tracks = search_tracks(artist_name)
    songs = []
    for track_name, artist, track_id in tracks:
        lyrics = get_lyrics(track_id)
        if lyrics:
            songs.append([track_name, artist, lyrics])
    return songs

# Function to write lyrics to CSV file
def write_to_csv(data, filename):
    with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["Title", "Artist", "Lyrics"])
        writer.writerows(data)

# Main function
def main():
    artists = [
      "Eminem",
      "Pop Smoke",
      "Rihanna",
      "50 Cent",
      "Drake",
      "Future",
      "Jay Z",
      "Dr. Dre",
      "Travis Scott",
      "Megan Thee Stallion",

      "Cardi B",
      "Kanye West",
      "Nicki Minaj",
      "Lil Wayne"
    ]  # Add more artists as needed


    for artist in artists:
        print(f"Fetching lyrics for {artist}...")
        songs = get_artist_lyrics(artist)
        all_songs.extend(songs)



if __name__ == "__main__":
    main()

def extend_songs():
  artists_extended = [
      "Snoop Dogg",
      "Lil Baby",
      "Post Malone",
      "Chance the Rapper",
      "Tyler, The Creator",
      "Juice WRLD",
      "Young Thug",
      "DaBaby",
      "Meek Mill",
      "G-Eazy",
      "Logic"
  ]


  for artist in artists_extended:
      print(f"Fetching lyrics for {artist}...")
      songs = get_artist_lyrics(artist)
      all_songs.extend(songs)
extend_songs()

write_to_csv(all_songs, "/content/MyDrive/MyDrive/NLP Project/lyrics.csv")

#drop languages that aren't english
!pip install langdetect
from langdetect import detect
import pandas as pd

# Read the CSV file into a DataFrame
lyrics_df = pd.read_csv('lyrics.csv')

def detect_lyric(x):
    try:
        return detect(x)
    except:
        return

lyrics_df["language"] = lyrics_df["Lyrics"].apply(detect_lyric)
lyrics_df= lyrics_df[lyrics_df.language == "en"]

lyrics = lyrics_df["Lyrics"].to_list()
lyrics = list(map(lambda x: x.replace("::", ":"),lyrics))
verses = [lyric.split(":") for lyric in lyrics]

import itertools

verses = list(itertools.chain(*verses))

def create_couplets(verses: list):
    couplets = []
    for i in range(1,len(verses)):
        couplet = verses[i-1] + "\n" + verses[i]
        couplets.append(couplet)

    return couplets


couplets = create_couplets(verses)
#display(couplets)

couplets_df = pd.DataFrame(couplets, columns=["couplets_g"])
print(couplets_df.head())